// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-catalog codegen should generate the correct code: graphql 1`] = `
"directive @discriminates(opaqueType: String, with: _DirectiveArgument_) on INTERFACE

directive @discriminationAlias(type: String!, value: String!) repeatable on INTERFACE

directive @excludeFromFilter on FIELD_DEFINITION

directive @field(at: _DirectiveArgument_, default: _DirectiveArgument_) on FIELD_DEFINITION

directive @implements(interface: String!) on INTERFACE | OBJECT

directive @relation(kind: String, name: String, nodeType: String) on FIELD_DEFINITION

directive @resolve(at: _DirectiveArgument_, from: String, nodeType: String) on FIELD_DEFINITION

interface API implements Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type APIConnection implements Connection {
  count: Int
  edges: [APIEdge!]!
  pageInfo: PageInfo!
}

type APIEdge implements Edge {
  cursor: String!
  node: API!
}

type AsyncAPI implements API & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

interface Component implements Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  consumesApis(after: String, before: String, first: Int, last: Int): APIConnection
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  providesApis(after: String, before: String, first: Int, last: Int): APIConnection
  subComponentOf: Component
  system: System
  tags: [String!]
  title: String
  type: String!
}

type ComponentConnection implements Connection {
  count: Int
  edges: [ComponentEdge!]!
  pageInfo: PageInfo!
}

type ComponentEdge implements Edge {
  cursor: String!
  node: Component!
}

interface Connection {
  count: Int
  edges: [Edge!]!
  pageInfo: PageInfo!
}

type Database implements Dependency & Entity & Node & Ownable & Resource {
  annotations: [KeyValuePair!]
  apiVersion: String!
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type Department implements Entity & Group & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

interface Dependency implements Node {
  id: ID!
}

type DependencyConnection implements Connection {
  count: Int
  edges: [DependencyEdge!]!
  pageInfo: PageInfo!
}

type DependencyEdge implements Edge {
  cursor: String!
  node: Dependency!
}

type Domain implements Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  systems(after: String, before: String, first: Int, last: Int): SystemConnection
  tags: [String!]
  title: String
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Entity implements Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  tags: [String!]
  title: String
}

type EntityConnection implements Connection {
  count: Int
  edges: [EntityEdge!]!
  pageInfo: PageInfo!
}

type EntityEdge implements Edge {
  cursor: String!
  node: Entity!
}

"""
{
  order: [
    { fieldA: ASC }
    { fieldB: DESC }
    { fieldC: [{ fieldD: ASC }] }
    { fieldE: { order: ASC } }
    {
      fieldE: {
        fields: [{ fieldF: DESC }, { fieldG: ASC }]
      }
    }
  ]
  search: {
    term: "substring"
    fields: {
      fieldA: true
      fieldB: true
      fieldC: { fieldD: true }
      fieldE: {
        include: true
        fields: { fieldF: true, fieldG: true }
      }
    }
  }
  match: [
    { fieldA: ["value1", "value2"], fieldB: ["value3"] }
    { fieldC: { fieldD: ["value4"] } }
    {
      fieldE: {
        values: ["value5", "value6"],
        fields: { fieldF: ["value7"], fieldG: ["value8"] }
      }
    }
  ]
}
"""
input EntityFilter {
  match: [EntityFilterExpression!]
  order: [EntityOrderField!]
  search: EntityTextFilter
}

input EntityFilterExpression {
  apiVersion: [JSON!]
  definition: [JSON!]
  description: [JSON!]
  kind: [JSON!]
  lifecycle: [JSON!]
  links: EntityFilterExpression_Links
  name: [JSON!]
  namespace: [JSON!]
  parameters: [JSON!]
  presence: [JSON!]
  profile: EntityFilterExpression_Profile
  steps: EntityFilterExpression_Steps
  tags: [JSON!]
  target: [JSON!]
  targets: [JSON!]
  title: [JSON!]
  type: [JSON!]
}

input EntityFilterExpression_Links {
  icon: [JSON!]
  title: [JSON!]
  type: [JSON!]
  url: [JSON!]
}

input EntityFilterExpression_Profile {
  displayName: [JSON!]
  email: [JSON!]
  picture: [JSON!]
}

input EntityFilterExpression_Steps {
  action: [JSON!]
  id: [JSON!]
  if: [JSON!]
  input: [JSON!]
  name: [JSON!]
}

type EntityLink {
  icon: String
  title: String
  type: String
  url: String!
}

input EntityOrderField {
  apiVersion: OrderDirection
  definition: OrderDirection
  description: OrderDirection
  kind: OrderDirection
  lifecycle: OrderDirection
  links: [EntityOrderField_Links!]
  name: OrderDirection
  namespace: OrderDirection
  parameters: OrderDirection
  presence: OrderDirection
  profile: [EntityOrderField_Profile!]
  steps: [EntityOrderField_Steps!]
  tags: OrderDirection
  target: OrderDirection
  targets: OrderDirection
  title: OrderDirection
  type: OrderDirection
}

input EntityOrderField_Links {
  icon: OrderDirection
  title: OrderDirection
  type: OrderDirection
  url: OrderDirection
}

input EntityOrderField_Profile {
  displayName: OrderDirection
  email: OrderDirection
  picture: OrderDirection
}

input EntityOrderField_Steps {
  action: OrderDirection
  id: OrderDirection
  if: OrderDirection
  input: OrderDirection
  name: OrderDirection
}

input EntityRawFilter {
  filter: [EntityRawFilterExpression!]
  fullTextFilter: EntityRawTextFilter
  orderFields: [EntityRawOrderField!]
}

input EntityRawFilterExpression {
  fields: [EntityRawFilterField!]!
}

input EntityRawFilterField {
  key: String!
  values: [JSON!]!
}

input EntityRawOrderField {
  field: String!
  order: OrderDirection!
}

input EntityRawTextFilter {
  fields: [String!]
  term: String!
}

input EntityTextFilter {
  fields: EntityTextFilterFields
  term: String!
}

input EntityTextFilterFields {
  apiVersion: Boolean
  definition: Boolean
  description: Boolean
  kind: Boolean
  lifecycle: Boolean
  links: EntityTextFilterFields_Links
  name: Boolean
  namespace: Boolean
  parameters: Boolean
  presence: Boolean
  profile: EntityTextFilterFields_Profile
  steps: EntityTextFilterFields_Steps
  tags: Boolean
  target: Boolean
  targets: Boolean
  title: Boolean
  type: Boolean
}

input EntityTextFilterFields_Links {
  icon: Boolean
  title: Boolean
  type: Boolean
  url: Boolean
}

input EntityTextFilterFields_Profile {
  displayName: Boolean
  email: Boolean
  picture: Boolean
}

input EntityTextFilterFields_Steps {
  action: Boolean
  id: Boolean
  if: Boolean
  input: Boolean
  name: Boolean
}

type FileLocation implements Entity & Location & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  presence: String
  tags: [String!]
  target: String
  targets: [String!]
  title: String
  type: String
}

type GRPC implements API & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type GraphQL implements API & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

interface Group implements Entity & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

type GroupConnection implements Connection {
  count: Int
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}

type GroupEdge implements Edge {
  cursor: String!
  node: Group!
}

type GroupProfile {
  displayName: String
  email: String
  picture: String
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type KeyValuePair {
  key: String!
  value: String!
}

type Library implements Component & Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  consumesApis(after: String, before: String, first: Int, last: Int): APIConnection
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  providesApis(after: String, before: String, first: Int, last: Int): APIConnection
  subComponentOf: Component
  system: System
  tags: [String!]
  title: String
  type: String!
}

interface Location implements Entity & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  presence: String
  tags: [String!]
  target: String
  targets: [String!]
  title: String
  type: String
}

interface Node {
  id: ID!
}

type OpaqueAPI implements API & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type OpaqueComponent implements Component & Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  consumesApis(after: String, before: String, first: Int, last: Int): APIConnection
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  providesApis(after: String, before: String, first: Int, last: Int): APIConnection
  subComponentOf: Component
  system: System
  tags: [String!]
  title: String
  type: String!
}

type OpaqueEntity implements Entity & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  tags: [String!]
  title: String
}

type OpaqueGroup implements Entity & Group & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

type OpaqueLocation implements Entity & Location & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  presence: String
  tags: [String!]
  target: String
  targets: [String!]
  title: String
  type: String
}

type OpaqueResource implements Dependency & Entity & Node & Ownable & Resource {
  annotations: [KeyValuePair!]
  apiVersion: String!
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type OpaqueTemplate implements Entity & Node & Ownable & Template {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner
  parameters: JSONObject
  steps: [Step!]!
  tags: [String!]
  title: String
  type: String!
}

type OpenAPI implements API & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiConsumedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiProvidedBy(after: String, before: String, first: Int, last: Int): ComponentConnection
  apiVersion: String!
  definition: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

enum OrderDirection {
  ASC
  DESC
}

type Organization implements Entity & Group & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

interface Ownable implements Node {
  id: ID!
}

type OwnableConnection implements Connection {
  count: Int
  edges: [OwnableEdge!]!
  pageInfo: PageInfo!
}

type OwnableEdge implements Edge {
  cursor: String!
  node: Ownable!
}

union Owner = Department | OpaqueGroup | Organization | SubDepartment | Team | User

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  entities(after: String, before: String, filter: EntityFilter, first: Int, last: Int, rawFilter: EntityRawFilter): EntityConnection
  entity(kind: String!, name: String!, namespace: String): Entity
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

interface Resource implements Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  system: System
  tags: [String!]
  title: String
  type: String!
}

type ResourceConnection implements Connection {
  count: Int
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
}

type ResourceEdge implements Edge {
  cursor: String!
  node: Resource!
}

type Service implements Component & Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  consumesApis(after: String, before: String, first: Int, last: Int): APIConnection
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  providesApis(after: String, before: String, first: Int, last: Int): APIConnection
  subComponentOf: Component
  system: System
  tags: [String!]
  title: String
  type: String!
}

type ServiceTemplate implements Entity & Node & Ownable & Template {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner
  parameters: JSONObject
  steps: [Step!]!
  tags: [String!]
  title: String
  type: String!
}

type Step {
  action: String!
  id: String
  if: JSON
  input: JSONObject
  name: String
}

type SubDepartment implements Entity & Group & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

type System implements Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  apis(after: String, before: String, first: Int, last: Int): APIConnection
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  description: String
  domain: Domain
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  resources(after: String, before: String, first: Int, last: Int): ResourceConnection
  tags: [String!]
  title: String
}

type SystemConnection implements Connection {
  count: Int
  edges: [SystemEdge!]!
  pageInfo: PageInfo!
}

type SystemEdge implements Edge {
  cursor: String!
  node: System!
}

type Team implements Entity & Group & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  children(after: String, before: String, first: Int, last: Int): GroupConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  members(after: String, before: String, first: Int, last: Int): UserConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  parent: Group
  profile: GroupProfile
  tags: [String!]
  title: String
  type: String!
}

interface Template implements Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner
  parameters: JSONObject
  steps: [Step!]!
  tags: [String!]
  title: String
  type: String!
}

type URLLocation implements Entity & Location & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  name: String!
  namespace: String!
  presence: String
  tags: [String!]
  target: String
  targets: [String!]
  title: String
  type: String
}

type User implements Entity & Node {
  annotations: [KeyValuePair!]
  apiVersion: String!
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  links: [EntityLink!]
  memberOf(after: String, before: String, first: Int, last: Int): GroupConnection
  name: String!
  namespace: String!
  ownerOf(after: String, before: String, first: Int, last: Int): OwnableConnection
  profile: UserProfile
  tags: [String!]
  title: String
}

type UserConnection implements Connection {
  count: Int
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

type UserProfile {
  displayName: String
  email: String
  picture: String
}

type Website implements Component & Dependency & Entity & Node & Ownable {
  annotations: [KeyValuePair!]
  apiVersion: String!
  components(after: String, before: String, first: Int, last: Int): ComponentConnection
  consumesApis(after: String, before: String, first: Int, last: Int): APIConnection
  dependencyOf(after: String, before: String, first: Int, last: Int): DependencyConnection
  dependsOn(after: String, before: String, first: Int, last: Int): DependencyConnection
  description: String
  id: ID!
  kind: String!
  labels: [KeyValuePair!]
  lifecycle: String!
  links: [EntityLink!]
  name: String!
  namespace: String!
  owner: Owner!
  providesApis(after: String, before: String, first: Int, last: Int): APIConnection
  subComponentOf: Component
  system: System
  tags: [String!]
  title: String
  type: String!
}

scalar _DirectiveArgument_"
`;

exports[`graphql-catalog codegen should generate the correct code: typescript 1`] = `
"/* eslint-disable */
// @ts-nocheck
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
  /** The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: { input: any; output: any; }
  _DirectiveArgument_: { input: any; output: any; }
};

export type Api = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type ApiApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ApiApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type ApiConnection = Connection & {
  __typename?: 'APIConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<ApiEdge>;
  pageInfo: PageInfo;
};

export type ApiEdge = Edge & {
  __typename?: 'APIEdge';
  cursor: Scalars['String']['output'];
  node: Api;
};

export type AsyncApi = Api & Entity & Node & Ownable & {
  __typename?: 'AsyncAPI';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type AsyncApiApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type AsyncApiApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Component = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  components?: Maybe<ComponentConnection>;
  consumesApis?: Maybe<ApiConnection>;
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  providesApis?: Maybe<ApiConnection>;
  subComponentOf?: Maybe<Component>;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type ComponentComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComponentConsumesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComponentDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComponentDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComponentProvidesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type ComponentConnection = Connection & {
  __typename?: 'ComponentConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<ComponentEdge>;
  pageInfo: PageInfo;
};

export type ComponentEdge = Edge & {
  __typename?: 'ComponentEdge';
  cursor: Scalars['String']['output'];
  node: Component;
};

export type Connection = {
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<Edge>;
  pageInfo: PageInfo;
};

export type Database = Dependency & Entity & Node & Ownable & Resource & {
  __typename?: 'Database';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type DatabaseDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type DatabaseDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Department = Entity & Group & Node & {
  __typename?: 'Department';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type DepartmentChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type DepartmentMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type DepartmentOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Dependency = {
  id: Scalars['ID']['output'];
};

export type DependencyConnection = Connection & {
  __typename?: 'DependencyConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<DependencyEdge>;
  pageInfo: PageInfo;
};

export type DependencyEdge = Edge & {
  __typename?: 'DependencyEdge';
  cursor: Scalars['String']['output'];
  node: Dependency;
};

export type Domain = Entity & Node & Ownable & {
  __typename?: 'Domain';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  systems?: Maybe<SystemConnection>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
};


export type DomainSystemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Edge = {
  cursor: Scalars['String']['output'];
  node: Node;
};

export type Entity = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
};

export type EntityConnection = Connection & {
  __typename?: 'EntityConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<EntityEdge>;
  pageInfo: PageInfo;
};

export type EntityEdge = Edge & {
  __typename?: 'EntityEdge';
  cursor: Scalars['String']['output'];
  node: Entity;
};

/**
 * {
 *   order: [
 *     { fieldA: ASC }
 *     { fieldB: DESC }
 *     { fieldC: [{ fieldD: ASC }] }
 *     { fieldE: { order: ASC } }
 *     {
 *       fieldE: {
 *         fields: [{ fieldF: DESC }, { fieldG: ASC }]
 *       }
 *     }
 *   ]
 *   search: {
 *     term: "substring"
 *     fields: {
 *       fieldA: true
 *       fieldB: true
 *       fieldC: { fieldD: true }
 *       fieldE: {
 *         include: true
 *         fields: { fieldF: true, fieldG: true }
 *       }
 *     }
 *   }
 *   match: [
 *     { fieldA: ["value1", "value2"], fieldB: ["value3"] }
 *     { fieldC: { fieldD: ["value4"] } }
 *     {
 *       fieldE: {
 *         values: ["value5", "value6"],
 *         fields: { fieldF: ["value7"], fieldG: ["value8"] }
 *       }
 *     }
 *   ]
 * }
 */
export type EntityFilter = {
  match?: InputMaybe<Array<EntityFilterExpression>>;
  order?: InputMaybe<Array<EntityOrderField>>;
  search?: InputMaybe<EntityTextFilter>;
};

export type EntityFilterExpression = {
  apiVersion?: InputMaybe<Array<Scalars['JSON']['input']>>;
  definition?: InputMaybe<Array<Scalars['JSON']['input']>>;
  description?: InputMaybe<Array<Scalars['JSON']['input']>>;
  kind?: InputMaybe<Array<Scalars['JSON']['input']>>;
  lifecycle?: InputMaybe<Array<Scalars['JSON']['input']>>;
  links?: InputMaybe<EntityFilterExpression_Links>;
  name?: InputMaybe<Array<Scalars['JSON']['input']>>;
  namespace?: InputMaybe<Array<Scalars['JSON']['input']>>;
  parameters?: InputMaybe<Array<Scalars['JSON']['input']>>;
  presence?: InputMaybe<Array<Scalars['JSON']['input']>>;
  profile?: InputMaybe<EntityFilterExpression_Profile>;
  steps?: InputMaybe<EntityFilterExpression_Steps>;
  tags?: InputMaybe<Array<Scalars['JSON']['input']>>;
  target?: InputMaybe<Array<Scalars['JSON']['input']>>;
  targets?: InputMaybe<Array<Scalars['JSON']['input']>>;
  title?: InputMaybe<Array<Scalars['JSON']['input']>>;
  type?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

export type EntityFilterExpression_Links = {
  icon?: InputMaybe<Array<Scalars['JSON']['input']>>;
  title?: InputMaybe<Array<Scalars['JSON']['input']>>;
  type?: InputMaybe<Array<Scalars['JSON']['input']>>;
  url?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

export type EntityFilterExpression_Profile = {
  displayName?: InputMaybe<Array<Scalars['JSON']['input']>>;
  email?: InputMaybe<Array<Scalars['JSON']['input']>>;
  picture?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

export type EntityFilterExpression_Steps = {
  action?: InputMaybe<Array<Scalars['JSON']['input']>>;
  id?: InputMaybe<Array<Scalars['JSON']['input']>>;
  if?: InputMaybe<Array<Scalars['JSON']['input']>>;
  input?: InputMaybe<Array<Scalars['JSON']['input']>>;
  name?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

export type EntityLink = {
  __typename?: 'EntityLink';
  icon?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
};

export type EntityOrderField = {
  apiVersion?: InputMaybe<OrderDirection>;
  definition?: InputMaybe<OrderDirection>;
  description?: InputMaybe<OrderDirection>;
  kind?: InputMaybe<OrderDirection>;
  lifecycle?: InputMaybe<OrderDirection>;
  links?: InputMaybe<Array<EntityOrderField_Links>>;
  name?: InputMaybe<OrderDirection>;
  namespace?: InputMaybe<OrderDirection>;
  parameters?: InputMaybe<OrderDirection>;
  presence?: InputMaybe<OrderDirection>;
  profile?: InputMaybe<Array<EntityOrderField_Profile>>;
  steps?: InputMaybe<Array<EntityOrderField_Steps>>;
  tags?: InputMaybe<OrderDirection>;
  target?: InputMaybe<OrderDirection>;
  targets?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
};

export type EntityOrderField_Links = {
  icon?: InputMaybe<OrderDirection>;
  title?: InputMaybe<OrderDirection>;
  type?: InputMaybe<OrderDirection>;
  url?: InputMaybe<OrderDirection>;
};

export type EntityOrderField_Profile = {
  displayName?: InputMaybe<OrderDirection>;
  email?: InputMaybe<OrderDirection>;
  picture?: InputMaybe<OrderDirection>;
};

export type EntityOrderField_Steps = {
  action?: InputMaybe<OrderDirection>;
  id?: InputMaybe<OrderDirection>;
  if?: InputMaybe<OrderDirection>;
  input?: InputMaybe<OrderDirection>;
  name?: InputMaybe<OrderDirection>;
};

export type EntityRawFilter = {
  filter?: InputMaybe<Array<EntityRawFilterExpression>>;
  fullTextFilter?: InputMaybe<EntityRawTextFilter>;
  orderFields?: InputMaybe<Array<EntityRawOrderField>>;
};

export type EntityRawFilterExpression = {
  fields: Array<EntityRawFilterField>;
};

export type EntityRawFilterField = {
  key: Scalars['String']['input'];
  values: Array<Scalars['JSON']['input']>;
};

export type EntityRawOrderField = {
  field: Scalars['String']['input'];
  order: OrderDirection;
};

export type EntityRawTextFilter = {
  fields?: InputMaybe<Array<Scalars['String']['input']>>;
  term: Scalars['String']['input'];
};

export type EntityTextFilter = {
  fields?: InputMaybe<EntityTextFilterFields>;
  term: Scalars['String']['input'];
};

export type EntityTextFilterFields = {
  apiVersion?: InputMaybe<Scalars['Boolean']['input']>;
  definition?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  kind?: InputMaybe<Scalars['Boolean']['input']>;
  lifecycle?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<EntityTextFilterFields_Links>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  namespace?: InputMaybe<Scalars['Boolean']['input']>;
  parameters?: InputMaybe<Scalars['Boolean']['input']>;
  presence?: InputMaybe<Scalars['Boolean']['input']>;
  profile?: InputMaybe<EntityTextFilterFields_Profile>;
  steps?: InputMaybe<EntityTextFilterFields_Steps>;
  tags?: InputMaybe<Scalars['Boolean']['input']>;
  target?: InputMaybe<Scalars['Boolean']['input']>;
  targets?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EntityTextFilterFields_Links = {
  icon?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  url?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EntityTextFilterFields_Profile = {
  displayName?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['Boolean']['input']>;
  picture?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EntityTextFilterFields_Steps = {
  action?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  if?: InputMaybe<Scalars['Boolean']['input']>;
  input?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FileLocation = Entity & Location & Node & {
  __typename?: 'FileLocation';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  presence?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  target?: Maybe<Scalars['String']['output']>;
  targets?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type Grpc = Api & Entity & Node & Ownable & {
  __typename?: 'GRPC';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type GrpcApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type GrpcApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type GraphQl = Api & Entity & Node & Ownable & {
  __typename?: 'GraphQL';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type GraphQlApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type GraphQlApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Group = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type GroupChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type GroupConnection = Connection & {
  __typename?: 'GroupConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<GroupEdge>;
  pageInfo: PageInfo;
};

export type GroupEdge = Edge & {
  __typename?: 'GroupEdge';
  cursor: Scalars['String']['output'];
  node: Group;
};

export type GroupProfile = {
  __typename?: 'GroupProfile';
  displayName?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  picture?: Maybe<Scalars['String']['output']>;
};

export type KeyValuePair = {
  __typename?: 'KeyValuePair';
  key: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type Library = Component & Dependency & Entity & Node & Ownable & {
  __typename?: 'Library';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  components?: Maybe<ComponentConnection>;
  consumesApis?: Maybe<ApiConnection>;
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  providesApis?: Maybe<ApiConnection>;
  subComponentOf?: Maybe<Component>;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type LibraryComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LibraryConsumesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LibraryDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LibraryDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LibraryProvidesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Location = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  presence?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  target?: Maybe<Scalars['String']['output']>;
  targets?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type OpaqueApi = Api & Entity & Node & Ownable & {
  __typename?: 'OpaqueAPI';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OpaqueApiApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueApiApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type OpaqueComponent = Component & Dependency & Entity & Node & Ownable & {
  __typename?: 'OpaqueComponent';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  components?: Maybe<ComponentConnection>;
  consumesApis?: Maybe<ApiConnection>;
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  providesApis?: Maybe<ApiConnection>;
  subComponentOf?: Maybe<Component>;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OpaqueComponentComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueComponentConsumesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueComponentDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueComponentDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueComponentProvidesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type OpaqueEntity = Entity & Node & {
  __typename?: 'OpaqueEntity';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
};

export type OpaqueGroup = Entity & Group & Node & {
  __typename?: 'OpaqueGroup';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OpaqueGroupChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueGroupMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueGroupOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type OpaqueLocation = Entity & Location & Node & {
  __typename?: 'OpaqueLocation';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  presence?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  target?: Maybe<Scalars['String']['output']>;
  targets?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type OpaqueResource = Dependency & Entity & Node & Ownable & Resource & {
  __typename?: 'OpaqueResource';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OpaqueResourceDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpaqueResourceDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type OpaqueTemplate = Entity & Node & Ownable & Template & {
  __typename?: 'OpaqueTemplate';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner?: Maybe<Owner>;
  parameters?: Maybe<Scalars['JSONObject']['output']>;
  steps: Array<Step>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type OpenApi = Api & Entity & Node & Ownable & {
  __typename?: 'OpenAPI';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiConsumedBy?: Maybe<ComponentConnection>;
  apiProvidedBy?: Maybe<ComponentConnection>;
  apiVersion: Scalars['String']['output'];
  definition: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OpenApiApiConsumedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OpenApiApiProvidedByArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type OrderDirection =
  | 'ASC'
  | 'DESC';

export type Organization = Entity & Group & Node & {
  __typename?: 'Organization';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type OrganizationChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Ownable = {
  id: Scalars['ID']['output'];
};

export type OwnableConnection = Connection & {
  __typename?: 'OwnableConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<OwnableEdge>;
  pageInfo: PageInfo;
};

export type OwnableEdge = Edge & {
  __typename?: 'OwnableEdge';
  cursor: Scalars['String']['output'];
  node: Ownable;
};

export type Owner = Department | OpaqueGroup | Organization | SubDepartment | Team | User;

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']['output']>;
  hasNextPage: Scalars['Boolean']['output'];
  hasPreviousPage: Scalars['Boolean']['output'];
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Query = {
  __typename?: 'Query';
  entities?: Maybe<EntityConnection>;
  entity?: Maybe<Entity>;
  node?: Maybe<Node>;
  nodes: Array<Maybe<Node>>;
};


export type QueryEntitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<EntityFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  rawFilter?: InputMaybe<EntityRawFilter>;
};


export type QueryEntityArgs = {
  kind: Scalars['String']['input'];
  name: Scalars['String']['input'];
  namespace?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};

export type Resource = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type ResourceDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ResourceDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type ResourceConnection = Connection & {
  __typename?: 'ResourceConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<ResourceEdge>;
  pageInfo: PageInfo;
};

export type ResourceEdge = Edge & {
  __typename?: 'ResourceEdge';
  cursor: Scalars['String']['output'];
  node: Resource;
};

export type Service = Component & Dependency & Entity & Node & Ownable & {
  __typename?: 'Service';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  components?: Maybe<ComponentConnection>;
  consumesApis?: Maybe<ApiConnection>;
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  providesApis?: Maybe<ApiConnection>;
  subComponentOf?: Maybe<Component>;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type ServiceComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ServiceConsumesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ServiceDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ServiceDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ServiceProvidesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type ServiceTemplate = Entity & Node & Ownable & Template & {
  __typename?: 'ServiceTemplate';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner?: Maybe<Owner>;
  parameters?: Maybe<Scalars['JSONObject']['output']>;
  steps: Array<Step>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type Step = {
  __typename?: 'Step';
  action: Scalars['String']['output'];
  id?: Maybe<Scalars['String']['output']>;
  if?: Maybe<Scalars['JSON']['output']>;
  input?: Maybe<Scalars['JSONObject']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type SubDepartment = Entity & Group & Node & {
  __typename?: 'SubDepartment';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type SubDepartmentChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SubDepartmentMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SubDepartmentOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type System = Entity & Node & Ownable & {
  __typename?: 'System';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  apis?: Maybe<ApiConnection>;
  components?: Maybe<ComponentConnection>;
  description?: Maybe<Scalars['String']['output']>;
  domain?: Maybe<Domain>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  resources?: Maybe<ResourceConnection>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
};


export type SystemApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SystemComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SystemResourcesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type SystemConnection = Connection & {
  __typename?: 'SystemConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<SystemEdge>;
  pageInfo: PageInfo;
};

export type SystemEdge = Edge & {
  __typename?: 'SystemEdge';
  cursor: Scalars['String']['output'];
  node: System;
};

export type Team = Entity & Group & Node & {
  __typename?: 'Team';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  children?: Maybe<GroupConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  members?: Maybe<UserConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  parent?: Maybe<Group>;
  profile?: Maybe<GroupProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type TeamChildrenArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TeamMembersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TeamOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Template = {
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner?: Maybe<Owner>;
  parameters?: Maybe<Scalars['JSONObject']['output']>;
  steps: Array<Step>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};

export type UrlLocation = Entity & Location & Node & {
  __typename?: 'URLLocation';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  presence?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  target?: Maybe<Scalars['String']['output']>;
  targets?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type User = Entity & Node & {
  __typename?: 'User';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  links?: Maybe<Array<EntityLink>>;
  memberOf?: Maybe<GroupConnection>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  ownerOf?: Maybe<OwnableConnection>;
  profile?: Maybe<UserProfile>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
};


export type UserMemberOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserOwnerOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type UserConnection = Connection & {
  __typename?: 'UserConnection';
  count?: Maybe<Scalars['Int']['output']>;
  edges: Array<UserEdge>;
  pageInfo: PageInfo;
};

export type UserEdge = Edge & {
  __typename?: 'UserEdge';
  cursor: Scalars['String']['output'];
  node: User;
};

export type UserProfile = {
  __typename?: 'UserProfile';
  displayName?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  picture?: Maybe<Scalars['String']['output']>;
};

export type Website = Component & Dependency & Entity & Node & Ownable & {
  __typename?: 'Website';
  annotations?: Maybe<Array<KeyValuePair>>;
  apiVersion: Scalars['String']['output'];
  components?: Maybe<ComponentConnection>;
  consumesApis?: Maybe<ApiConnection>;
  dependencyOf?: Maybe<DependencyConnection>;
  dependsOn?: Maybe<DependencyConnection>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  kind: Scalars['String']['output'];
  labels?: Maybe<Array<KeyValuePair>>;
  lifecycle: Scalars['String']['output'];
  links?: Maybe<Array<EntityLink>>;
  name: Scalars['String']['output'];
  namespace: Scalars['String']['output'];
  owner: Owner;
  providesApis?: Maybe<ApiConnection>;
  subComponentOf?: Maybe<Component>;
  system?: Maybe<System>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  title?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
};


export type WebsiteComponentsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WebsiteConsumesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WebsiteDependencyOfArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WebsiteDependsOnArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type WebsiteProvidesApisArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes<RefType extends Record<string, unknown>> = {
  Owner: ( Department ) | ( OpaqueGroup ) | ( Organization ) | ( SubDepartment ) | ( Team ) | ( User );
};

/** Mapping of interface types */
export type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {
  API: ( Omit<AsyncApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Grpc, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<GraphQl, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpenApi, 'owner'> & { owner: RefType['Owner'] } );
  Component: ( Omit<Library, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueComponent, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Service, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Website, 'owner'> & { owner: RefType['Owner'] } );
  Connection: ( ApiConnection ) | ( ComponentConnection ) | ( DependencyConnection ) | ( EntityConnection ) | ( GroupConnection ) | ( OwnableConnection ) | ( ResourceConnection ) | ( SystemConnection ) | ( UserConnection );
  Dependency: ( Omit<Database, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Library, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueComponent, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueResource, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Service, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Website, 'owner'> & { owner: RefType['Owner'] } );
  Edge: ( ApiEdge ) | ( ComponentEdge ) | ( DependencyEdge ) | ( EntityEdge ) | ( GroupEdge ) | ( OwnableEdge ) | ( ResourceEdge ) | ( SystemEdge ) | ( UserEdge );
  Entity: ( Omit<AsyncApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Database, 'owner'> & { owner: RefType['Owner'] } ) | ( Department ) | ( Omit<Domain, 'owner'> & { owner: RefType['Owner'] } ) | ( FileLocation ) | ( Omit<Grpc, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<GraphQl, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Library, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueComponent, 'owner'> & { owner: RefType['Owner'] } ) | ( OpaqueEntity ) | ( OpaqueGroup ) | ( OpaqueLocation ) | ( Omit<OpaqueResource, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( Omit<OpenApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Organization ) | ( Omit<Service, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( SubDepartment ) | ( Omit<System, 'owner'> & { owner: RefType['Owner'] } ) | ( Team ) | ( UrlLocation ) | ( User ) | ( Omit<Website, 'owner'> & { owner: RefType['Owner'] } );
  Group: ( Department ) | ( OpaqueGroup ) | ( Organization ) | ( SubDepartment ) | ( Team );
  Location: ( FileLocation ) | ( OpaqueLocation ) | ( UrlLocation );
  Node: ( Omit<AsyncApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Database, 'owner'> & { owner: RefType['Owner'] } ) | ( Department ) | ( Omit<Domain, 'owner'> & { owner: RefType['Owner'] } ) | ( FileLocation ) | ( Omit<Grpc, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<GraphQl, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Library, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueComponent, 'owner'> & { owner: RefType['Owner'] } ) | ( OpaqueEntity ) | ( OpaqueGroup ) | ( OpaqueLocation ) | ( Omit<OpaqueResource, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( Omit<OpenApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Organization ) | ( Omit<Service, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( SubDepartment ) | ( Omit<System, 'owner'> & { owner: RefType['Owner'] } ) | ( Team ) | ( UrlLocation ) | ( User ) | ( Omit<Website, 'owner'> & { owner: RefType['Owner'] } );
  Ownable: ( Omit<AsyncApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Database, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Domain, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Grpc, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<GraphQl, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Library, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueComponent, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueResource, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( Omit<OpenApi, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Service, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( Omit<System, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<Website, 'owner'> & { owner: RefType['Owner'] } );
  Resource: ( Omit<Database, 'owner'> & { owner: RefType['Owner'] } ) | ( Omit<OpaqueResource, 'owner'> & { owner: RefType['Owner'] } );
  Template: ( Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } ) | ( Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<RefType['Owner']> } );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  API: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['API']>;
  APIConnection: ResolverTypeWrapper<ApiConnection>;
  APIEdge: ResolverTypeWrapper<ApiEdge>;
  AsyncAPI: ResolverTypeWrapper<Omit<AsyncApi, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  Component: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Component']>;
  ComponentConnection: ResolverTypeWrapper<ComponentConnection>;
  ComponentEdge: ResolverTypeWrapper<ComponentEdge>;
  Connection: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Connection']>;
  Database: ResolverTypeWrapper<Omit<Database, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  Department: ResolverTypeWrapper<Department>;
  Dependency: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Dependency']>;
  DependencyConnection: ResolverTypeWrapper<DependencyConnection>;
  DependencyEdge: ResolverTypeWrapper<DependencyEdge>;
  Domain: ResolverTypeWrapper<Omit<Domain, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  Edge: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Edge']>;
  Entity: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Entity']>;
  EntityConnection: ResolverTypeWrapper<EntityConnection>;
  EntityEdge: ResolverTypeWrapper<EntityEdge>;
  EntityFilter: EntityFilter;
  EntityFilterExpression: EntityFilterExpression;
  EntityFilterExpression_Links: EntityFilterExpression_Links;
  EntityFilterExpression_Profile: EntityFilterExpression_Profile;
  EntityFilterExpression_Steps: EntityFilterExpression_Steps;
  EntityLink: ResolverTypeWrapper<EntityLink>;
  EntityOrderField: EntityOrderField;
  EntityOrderField_Links: EntityOrderField_Links;
  EntityOrderField_Profile: EntityOrderField_Profile;
  EntityOrderField_Steps: EntityOrderField_Steps;
  EntityRawFilter: EntityRawFilter;
  EntityRawFilterExpression: EntityRawFilterExpression;
  EntityRawFilterField: EntityRawFilterField;
  EntityRawOrderField: EntityRawOrderField;
  EntityRawTextFilter: EntityRawTextFilter;
  EntityTextFilter: EntityTextFilter;
  EntityTextFilterFields: EntityTextFilterFields;
  EntityTextFilterFields_Links: EntityTextFilterFields_Links;
  EntityTextFilterFields_Profile: EntityTextFilterFields_Profile;
  EntityTextFilterFields_Steps: EntityTextFilterFields_Steps;
  FileLocation: ResolverTypeWrapper<FileLocation>;
  GRPC: ResolverTypeWrapper<Omit<Grpc, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  GraphQL: ResolverTypeWrapper<Omit<GraphQl, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  Group: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Group']>;
  GroupConnection: ResolverTypeWrapper<GroupConnection>;
  GroupEdge: ResolverTypeWrapper<GroupEdge>;
  GroupProfile: ResolverTypeWrapper<GroupProfile>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  JSON: ResolverTypeWrapper<Scalars['JSON']['output']>;
  JSONObject: ResolverTypeWrapper<Scalars['JSONObject']['output']>;
  KeyValuePair: ResolverTypeWrapper<KeyValuePair>;
  Library: ResolverTypeWrapper<Omit<Library, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  Location: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Location']>;
  Node: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Node']>;
  OpaqueAPI: ResolverTypeWrapper<Omit<OpaqueApi, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  OpaqueComponent: ResolverTypeWrapper<Omit<OpaqueComponent, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  OpaqueEntity: ResolverTypeWrapper<OpaqueEntity>;
  OpaqueGroup: ResolverTypeWrapper<OpaqueGroup>;
  OpaqueLocation: ResolverTypeWrapper<OpaqueLocation>;
  OpaqueResource: ResolverTypeWrapper<Omit<OpaqueResource, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  OpaqueTemplate: ResolverTypeWrapper<Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<ResolversTypes['Owner']> }>;
  OpenAPI: ResolverTypeWrapper<Omit<OpenApi, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  OrderDirection: OrderDirection;
  Organization: ResolverTypeWrapper<Organization>;
  Ownable: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Ownable']>;
  OwnableConnection: ResolverTypeWrapper<OwnableConnection>;
  OwnableEdge: ResolverTypeWrapper<OwnableEdge>;
  Owner: ResolverTypeWrapper<ResolversUnionTypes<ResolversTypes>['Owner']>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  Query: ResolverTypeWrapper<{}>;
  Resource: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Resource']>;
  ResourceConnection: ResolverTypeWrapper<ResourceConnection>;
  ResourceEdge: ResolverTypeWrapper<ResourceEdge>;
  Service: ResolverTypeWrapper<Omit<Service, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  ServiceTemplate: ResolverTypeWrapper<Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<ResolversTypes['Owner']> }>;
  Step: ResolverTypeWrapper<Step>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  SubDepartment: ResolverTypeWrapper<SubDepartment>;
  System: ResolverTypeWrapper<Omit<System, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  SystemConnection: ResolverTypeWrapper<SystemConnection>;
  SystemEdge: ResolverTypeWrapper<SystemEdge>;
  Team: ResolverTypeWrapper<Team>;
  Template: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Template']>;
  URLLocation: ResolverTypeWrapper<UrlLocation>;
  User: ResolverTypeWrapper<User>;
  UserConnection: ResolverTypeWrapper<UserConnection>;
  UserEdge: ResolverTypeWrapper<UserEdge>;
  UserProfile: ResolverTypeWrapper<UserProfile>;
  Website: ResolverTypeWrapper<Omit<Website, 'owner'> & { owner: ResolversTypes['Owner'] }>;
  _DirectiveArgument_: ResolverTypeWrapper<Scalars['_DirectiveArgument_']['output']>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  API: ResolversInterfaceTypes<ResolversParentTypes>['API'];
  APIConnection: ApiConnection;
  APIEdge: ApiEdge;
  AsyncAPI: Omit<AsyncApi, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Boolean: Scalars['Boolean']['output'];
  Component: ResolversInterfaceTypes<ResolversParentTypes>['Component'];
  ComponentConnection: ComponentConnection;
  ComponentEdge: ComponentEdge;
  Connection: ResolversInterfaceTypes<ResolversParentTypes>['Connection'];
  Database: Omit<Database, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Department: Department;
  Dependency: ResolversInterfaceTypes<ResolversParentTypes>['Dependency'];
  DependencyConnection: DependencyConnection;
  DependencyEdge: DependencyEdge;
  Domain: Omit<Domain, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Edge: ResolversInterfaceTypes<ResolversParentTypes>['Edge'];
  Entity: ResolversInterfaceTypes<ResolversParentTypes>['Entity'];
  EntityConnection: EntityConnection;
  EntityEdge: EntityEdge;
  EntityFilter: EntityFilter;
  EntityFilterExpression: EntityFilterExpression;
  EntityFilterExpression_Links: EntityFilterExpression_Links;
  EntityFilterExpression_Profile: EntityFilterExpression_Profile;
  EntityFilterExpression_Steps: EntityFilterExpression_Steps;
  EntityLink: EntityLink;
  EntityOrderField: EntityOrderField;
  EntityOrderField_Links: EntityOrderField_Links;
  EntityOrderField_Profile: EntityOrderField_Profile;
  EntityOrderField_Steps: EntityOrderField_Steps;
  EntityRawFilter: EntityRawFilter;
  EntityRawFilterExpression: EntityRawFilterExpression;
  EntityRawFilterField: EntityRawFilterField;
  EntityRawOrderField: EntityRawOrderField;
  EntityRawTextFilter: EntityRawTextFilter;
  EntityTextFilter: EntityTextFilter;
  EntityTextFilterFields: EntityTextFilterFields;
  EntityTextFilterFields_Links: EntityTextFilterFields_Links;
  EntityTextFilterFields_Profile: EntityTextFilterFields_Profile;
  EntityTextFilterFields_Steps: EntityTextFilterFields_Steps;
  FileLocation: FileLocation;
  GRPC: Omit<Grpc, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  GraphQL: Omit<GraphQl, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Group: ResolversInterfaceTypes<ResolversParentTypes>['Group'];
  GroupConnection: GroupConnection;
  GroupEdge: GroupEdge;
  GroupProfile: GroupProfile;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  JSON: Scalars['JSON']['output'];
  JSONObject: Scalars['JSONObject']['output'];
  KeyValuePair: KeyValuePair;
  Library: Omit<Library, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Location: ResolversInterfaceTypes<ResolversParentTypes>['Location'];
  Node: ResolversInterfaceTypes<ResolversParentTypes>['Node'];
  OpaqueAPI: Omit<OpaqueApi, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  OpaqueComponent: Omit<OpaqueComponent, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  OpaqueEntity: OpaqueEntity;
  OpaqueGroup: OpaqueGroup;
  OpaqueLocation: OpaqueLocation;
  OpaqueResource: Omit<OpaqueResource, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  OpaqueTemplate: Omit<OpaqueTemplate, 'owner'> & { owner?: Maybe<ResolversParentTypes['Owner']> };
  OpenAPI: Omit<OpenApi, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  Organization: Organization;
  Ownable: ResolversInterfaceTypes<ResolversParentTypes>['Ownable'];
  OwnableConnection: OwnableConnection;
  OwnableEdge: OwnableEdge;
  Owner: ResolversUnionTypes<ResolversParentTypes>['Owner'];
  PageInfo: PageInfo;
  Query: {};
  Resource: ResolversInterfaceTypes<ResolversParentTypes>['Resource'];
  ResourceConnection: ResourceConnection;
  ResourceEdge: ResourceEdge;
  Service: Omit<Service, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  ServiceTemplate: Omit<ServiceTemplate, 'owner'> & { owner?: Maybe<ResolversParentTypes['Owner']> };
  Step: Step;
  String: Scalars['String']['output'];
  SubDepartment: SubDepartment;
  System: Omit<System, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  SystemConnection: SystemConnection;
  SystemEdge: SystemEdge;
  Team: Team;
  Template: ResolversInterfaceTypes<ResolversParentTypes>['Template'];
  URLLocation: UrlLocation;
  User: User;
  UserConnection: UserConnection;
  UserEdge: UserEdge;
  UserProfile: UserProfile;
  Website: Omit<Website, 'owner'> & { owner: ResolversParentTypes['Owner'] };
  _DirectiveArgument_: Scalars['_DirectiveArgument_']['output'];
};

export type DiscriminatesDirectiveArgs = {
  opaqueType?: Maybe<Scalars['String']['input']>;
  with?: Maybe<Scalars['_DirectiveArgument_']['input']>;
};

export type DiscriminatesDirectiveResolver<Result, Parent, ContextType = any, Args = DiscriminatesDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type DiscriminationAliasDirectiveArgs = {
  type: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type DiscriminationAliasDirectiveResolver<Result, Parent, ContextType = any, Args = DiscriminationAliasDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ExcludeFromFilterDirectiveArgs = { };

export type ExcludeFromFilterDirectiveResolver<Result, Parent, ContextType = any, Args = ExcludeFromFilterDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type FieldDirectiveArgs = {
  at?: Maybe<Scalars['_DirectiveArgument_']['input']>;
  default?: Maybe<Scalars['_DirectiveArgument_']['input']>;
};

export type FieldDirectiveResolver<Result, Parent, ContextType = any, Args = FieldDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ImplementsDirectiveArgs = {
  interface: Scalars['String']['input'];
};

export type ImplementsDirectiveResolver<Result, Parent, ContextType = any, Args = ImplementsDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type RelationDirectiveArgs = {
  kind?: Maybe<Scalars['String']['input']>;
  name?: Maybe<Scalars['String']['input']>;
  nodeType?: Maybe<Scalars['String']['input']>;
};

export type RelationDirectiveResolver<Result, Parent, ContextType = any, Args = RelationDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ResolveDirectiveArgs = {
  at?: Maybe<Scalars['_DirectiveArgument_']['input']>;
  from?: Maybe<Scalars['String']['input']>;
  nodeType?: Maybe<Scalars['String']['input']>;
};

export type ResolveDirectiveResolver<Result, Parent, ContextType = any, Args = ResolveDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ApiResolvers<ContextType = any, ParentType extends ResolversParentTypes['API'] = ResolversParentTypes['API']> = {
  __resolveType: TypeResolveFn<'AsyncAPI' | 'GRPC' | 'GraphQL' | 'OpaqueAPI' | 'OpenAPI', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<ApiApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<ApiApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type ApiConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['APIConnection'] = ResolversParentTypes['APIConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['APIEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApiEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['APIEdge'] = ResolversParentTypes['APIEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['API'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AsyncApiResolvers<ContextType = any, ParentType extends ResolversParentTypes['AsyncAPI'] = ResolversParentTypes['AsyncAPI']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<AsyncApiApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<AsyncApiApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ComponentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Component'] = ResolversParentTypes['Component']> = {
  __resolveType: TypeResolveFn<'Library' | 'OpaqueComponent' | 'Service' | 'Website', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<ComponentComponentsArgs>>;
  consumesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<ComponentConsumesApisArgs>>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ComponentDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ComponentDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  providesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<ComponentProvidesApisArgs>>;
  subComponentOf?: Resolver<Maybe<ResolversTypes['Component']>, ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type ComponentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ComponentConnection'] = ResolversParentTypes['ComponentConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ComponentEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ComponentEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ComponentEdge'] = ResolversParentTypes['ComponentEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Component'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Connection'] = ResolversParentTypes['Connection']> = {
  __resolveType: TypeResolveFn<'APIConnection' | 'ComponentConnection' | 'DependencyConnection' | 'EntityConnection' | 'GroupConnection' | 'OwnableConnection' | 'ResourceConnection' | 'SystemConnection' | 'UserConnection', ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['Edge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
};

export type DatabaseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Database'] = ResolversParentTypes['Database']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<DatabaseDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<DatabaseDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DepartmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['Department'] = ResolversParentTypes['Department']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<DepartmentChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<DepartmentMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<DepartmentOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DependencyResolvers<ContextType = any, ParentType extends ResolversParentTypes['Dependency'] = ResolversParentTypes['Dependency']> = {
  __resolveType: TypeResolveFn<'Database' | 'Library' | 'OpaqueComponent' | 'OpaqueResource' | 'Service' | 'Website', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type DependencyConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DependencyConnection'] = ResolversParentTypes['DependencyConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['DependencyEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DependencyEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DependencyEdge'] = ResolversParentTypes['DependencyEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Dependency'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DomainResolvers<ContextType = any, ParentType extends ResolversParentTypes['Domain'] = ResolversParentTypes['Domain']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  systems?: Resolver<Maybe<ResolversTypes['SystemConnection']>, ParentType, ContextType, Partial<DomainSystemsArgs>>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Edge'] = ResolversParentTypes['Edge']> = {
  __resolveType: TypeResolveFn<'APIEdge' | 'ComponentEdge' | 'DependencyEdge' | 'EntityEdge' | 'GroupEdge' | 'OwnableEdge' | 'ResourceEdge' | 'SystemEdge' | 'UserEdge', ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Node'], ParentType, ContextType>;
};

export type EntityResolvers<ContextType = any, ParentType extends ResolversParentTypes['Entity'] = ResolversParentTypes['Entity']> = {
  __resolveType: TypeResolveFn<'AsyncAPI' | 'Database' | 'Department' | 'Domain' | 'FileLocation' | 'GRPC' | 'GraphQL' | 'Library' | 'OpaqueAPI' | 'OpaqueComponent' | 'OpaqueEntity' | 'OpaqueGroup' | 'OpaqueLocation' | 'OpaqueResource' | 'OpaqueTemplate' | 'OpenAPI' | 'Organization' | 'Service' | 'ServiceTemplate' | 'SubDepartment' | 'System' | 'Team' | 'URLLocation' | 'User' | 'Website', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type EntityConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntityConnection'] = ResolversParentTypes['EntityConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['EntityEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EntityEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntityEdge'] = ResolversParentTypes['EntityEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Entity'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EntityLinkResolvers<ContextType = any, ParentType extends ResolversParentTypes['EntityLink'] = ResolversParentTypes['EntityLink']> = {
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FileLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['FileLocation'] = ResolversParentTypes['FileLocation']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  presence?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  targets?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GrpcResolvers<ContextType = any, ParentType extends ResolversParentTypes['GRPC'] = ResolversParentTypes['GRPC']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<GrpcApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<GrpcApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GraphQlResolvers<ContextType = any, ParentType extends ResolversParentTypes['GraphQL'] = ResolversParentTypes['GraphQL']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<GraphQlApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<GraphQlApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['Group'] = ResolversParentTypes['Group']> = {
  __resolveType: TypeResolveFn<'Department' | 'OpaqueGroup' | 'Organization' | 'SubDepartment' | 'Team', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<GroupChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<GroupMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<GroupOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type GroupConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupConnection'] = ResolversParentTypes['GroupConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['GroupEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupEdge'] = ResolversParentTypes['GroupEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Group'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupProfileResolvers<ContextType = any, ParentType extends ResolversParentTypes['GroupProfile'] = ResolversParentTypes['GroupProfile']> = {
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export interface JsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSONObject'], any> {
  name: 'JSONObject';
}

export type KeyValuePairResolvers<ContextType = any, ParentType extends ResolversParentTypes['KeyValuePair'] = ResolversParentTypes['KeyValuePair']> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LibraryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Library'] = ResolversParentTypes['Library']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<LibraryComponentsArgs>>;
  consumesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<LibraryConsumesApisArgs>>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<LibraryDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<LibraryDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  providesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<LibraryProvidesApisArgs>>;
  subComponentOf?: Resolver<Maybe<ResolversTypes['Component']>, ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = {
  __resolveType: TypeResolveFn<'FileLocation' | 'OpaqueLocation' | 'URLLocation', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  presence?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  targets?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'AsyncAPI' | 'Database' | 'Department' | 'Domain' | 'FileLocation' | 'GRPC' | 'GraphQL' | 'Library' | 'OpaqueAPI' | 'OpaqueComponent' | 'OpaqueEntity' | 'OpaqueGroup' | 'OpaqueLocation' | 'OpaqueResource' | 'OpaqueTemplate' | 'OpenAPI' | 'Organization' | 'Service' | 'ServiceTemplate' | 'SubDepartment' | 'System' | 'Team' | 'URLLocation' | 'User' | 'Website', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type OpaqueApiResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueAPI'] = ResolversParentTypes['OpaqueAPI']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<OpaqueApiApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<OpaqueApiApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueComponentResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueComponent'] = ResolversParentTypes['OpaqueComponent']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<OpaqueComponentComponentsArgs>>;
  consumesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<OpaqueComponentConsumesApisArgs>>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<OpaqueComponentDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<OpaqueComponentDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  providesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<OpaqueComponentProvidesApisArgs>>;
  subComponentOf?: Resolver<Maybe<ResolversTypes['Component']>, ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueEntityResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueEntity'] = ResolversParentTypes['OpaqueEntity']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueGroup'] = ResolversParentTypes['OpaqueGroup']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<OpaqueGroupChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<OpaqueGroupMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<OpaqueGroupOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueLocation'] = ResolversParentTypes['OpaqueLocation']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  presence?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  targets?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueResourceResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueResource'] = ResolversParentTypes['OpaqueResource']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<OpaqueResourceDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<OpaqueResourceDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpaqueTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpaqueTemplate'] = ResolversParentTypes['OpaqueTemplate']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner']>, ParentType, ContextType>;
  parameters?: Resolver<Maybe<ResolversTypes['JSONObject']>, ParentType, ContextType>;
  steps?: Resolver<Array<ResolversTypes['Step']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OpenApiResolvers<ContextType = any, ParentType extends ResolversParentTypes['OpenAPI'] = ResolversParentTypes['OpenAPI']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiConsumedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<OpenApiApiConsumedByArgs>>;
  apiProvidedBy?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<OpenApiApiProvidedByArgs>>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  definition?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrganizationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Organization'] = ResolversParentTypes['Organization']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<OrganizationChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<OrganizationMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<OrganizationOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OwnableResolvers<ContextType = any, ParentType extends ResolversParentTypes['Ownable'] = ResolversParentTypes['Ownable']> = {
  __resolveType: TypeResolveFn<'AsyncAPI' | 'Database' | 'Domain' | 'GRPC' | 'GraphQL' | 'Library' | 'OpaqueAPI' | 'OpaqueComponent' | 'OpaqueResource' | 'OpaqueTemplate' | 'OpenAPI' | 'Service' | 'ServiceTemplate' | 'System' | 'Website', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type OwnableConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['OwnableConnection'] = ResolversParentTypes['OwnableConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['OwnableEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OwnableEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['OwnableEdge'] = ResolversParentTypes['OwnableEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Ownable'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OwnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['Owner'] = ResolversParentTypes['Owner']> = {
  __resolveType: TypeResolveFn<'Department' | 'OpaqueGroup' | 'Organization' | 'SubDepartment' | 'Team' | 'User', ParentType, ContextType>;
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  entities?: Resolver<Maybe<ResolversTypes['EntityConnection']>, ParentType, ContextType, Partial<QueryEntitiesArgs>>;
  entity?: Resolver<Maybe<ResolversTypes['Entity']>, ParentType, ContextType, RequireFields<QueryEntityArgs, 'kind' | 'name'>>;
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QueryNodeArgs, 'id'>>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Node']>>, ParentType, ContextType, RequireFields<QueryNodesArgs, 'ids'>>;
};

export type ResourceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Resource'] = ResolversParentTypes['Resource']> = {
  __resolveType: TypeResolveFn<'Database' | 'OpaqueResource', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ResourceDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ResourceDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type ResourceConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResourceConnection'] = ResolversParentTypes['ResourceConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ResourceEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ResourceEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResourceEdge'] = ResolversParentTypes['ResourceEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Resource'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ServiceResolvers<ContextType = any, ParentType extends ResolversParentTypes['Service'] = ResolversParentTypes['Service']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<ServiceComponentsArgs>>;
  consumesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<ServiceConsumesApisArgs>>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ServiceDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<ServiceDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  providesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<ServiceProvidesApisArgs>>;
  subComponentOf?: Resolver<Maybe<ResolversTypes['Component']>, ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ServiceTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ServiceTemplate'] = ResolversParentTypes['ServiceTemplate']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner']>, ParentType, ContextType>;
  parameters?: Resolver<Maybe<ResolversTypes['JSONObject']>, ParentType, ContextType>;
  steps?: Resolver<Array<ResolversTypes['Step']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StepResolvers<ContextType = any, ParentType extends ResolversParentTypes['Step'] = ResolversParentTypes['Step']> = {
  action?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  if?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  input?: Resolver<Maybe<ResolversTypes['JSONObject']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubDepartmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['SubDepartment'] = ResolversParentTypes['SubDepartment']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<SubDepartmentChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<SubDepartmentMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<SubDepartmentOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SystemResolvers<ContextType = any, ParentType extends ResolversParentTypes['System'] = ResolversParentTypes['System']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  apis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<SystemApisArgs>>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<SystemComponentsArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['Domain']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  resources?: Resolver<Maybe<ResolversTypes['ResourceConnection']>, ParentType, ContextType, Partial<SystemResourcesArgs>>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SystemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemConnection'] = ResolversParentTypes['SystemConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['SystemEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SystemEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemEdge'] = ResolversParentTypes['SystemEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['System'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TeamResolvers<ContextType = any, ParentType extends ResolversParentTypes['Team'] = ResolversParentTypes['Team']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<TeamChildrenArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  members?: Resolver<Maybe<ResolversTypes['UserConnection']>, ParentType, ContextType, Partial<TeamMembersArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<TeamOwnerOfArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['Group']>, ParentType, ContextType>;
  profile?: Resolver<Maybe<ResolversTypes['GroupProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['Template'] = ResolversParentTypes['Template']> = {
  __resolveType: TypeResolveFn<'OpaqueTemplate' | 'ServiceTemplate', ParentType, ContextType>;
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner']>, ParentType, ContextType>;
  parameters?: Resolver<Maybe<ResolversTypes['JSONObject']>, ParentType, ContextType>;
  steps?: Resolver<Array<ResolversTypes['Step']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
};

export type UrlLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['URLLocation'] = ResolversParentTypes['URLLocation']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  presence?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  targets?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  memberOf?: Resolver<Maybe<ResolversTypes['GroupConnection']>, ParentType, ContextType, Partial<UserMemberOfArgs>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ownerOf?: Resolver<Maybe<ResolversTypes['OwnableConnection']>, ParentType, ContextType, Partial<UserOwnerOfArgs>>;
  profile?: Resolver<Maybe<ResolversTypes['UserProfile']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserConnection'] = ResolversParentTypes['UserConnection']> = {
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['UserEdge']>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserEdge'] = ResolversParentTypes['UserEdge']> = {
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  node?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserProfileResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserProfile'] = ResolversParentTypes['UserProfile']> = {
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WebsiteResolvers<ContextType = any, ParentType extends ResolversParentTypes['Website'] = ResolversParentTypes['Website']> = {
  annotations?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  apiVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  components?: Resolver<Maybe<ResolversTypes['ComponentConnection']>, ParentType, ContextType, Partial<WebsiteComponentsArgs>>;
  consumesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<WebsiteConsumesApisArgs>>;
  dependencyOf?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<WebsiteDependencyOfArgs>>;
  dependsOn?: Resolver<Maybe<ResolversTypes['DependencyConnection']>, ParentType, ContextType, Partial<WebsiteDependsOnArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  labels?: Resolver<Maybe<Array<ResolversTypes['KeyValuePair']>>, ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<ResolversTypes['EntityLink']>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  owner?: Resolver<ResolversTypes['Owner'], ParentType, ContextType>;
  providesApis?: Resolver<Maybe<ResolversTypes['APIConnection']>, ParentType, ContextType, Partial<WebsiteProvidesApisArgs>>;
  subComponentOf?: Resolver<Maybe<ResolversTypes['Component']>, ParentType, ContextType>;
  system?: Resolver<Maybe<ResolversTypes['System']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface _DirectiveArgument_ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['_DirectiveArgument_'], any> {
  name: '_DirectiveArgument_';
}

export type Resolvers<ContextType = any> = {
  API?: ApiResolvers<ContextType>;
  APIConnection?: ApiConnectionResolvers<ContextType>;
  APIEdge?: ApiEdgeResolvers<ContextType>;
  AsyncAPI?: AsyncApiResolvers<ContextType>;
  Component?: ComponentResolvers<ContextType>;
  ComponentConnection?: ComponentConnectionResolvers<ContextType>;
  ComponentEdge?: ComponentEdgeResolvers<ContextType>;
  Connection?: ConnectionResolvers<ContextType>;
  Database?: DatabaseResolvers<ContextType>;
  Department?: DepartmentResolvers<ContextType>;
  Dependency?: DependencyResolvers<ContextType>;
  DependencyConnection?: DependencyConnectionResolvers<ContextType>;
  DependencyEdge?: DependencyEdgeResolvers<ContextType>;
  Domain?: DomainResolvers<ContextType>;
  Edge?: EdgeResolvers<ContextType>;
  Entity?: EntityResolvers<ContextType>;
  EntityConnection?: EntityConnectionResolvers<ContextType>;
  EntityEdge?: EntityEdgeResolvers<ContextType>;
  EntityLink?: EntityLinkResolvers<ContextType>;
  FileLocation?: FileLocationResolvers<ContextType>;
  GRPC?: GrpcResolvers<ContextType>;
  GraphQL?: GraphQlResolvers<ContextType>;
  Group?: GroupResolvers<ContextType>;
  GroupConnection?: GroupConnectionResolvers<ContextType>;
  GroupEdge?: GroupEdgeResolvers<ContextType>;
  GroupProfile?: GroupProfileResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  JSONObject?: GraphQLScalarType;
  KeyValuePair?: KeyValuePairResolvers<ContextType>;
  Library?: LibraryResolvers<ContextType>;
  Location?: LocationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  OpaqueAPI?: OpaqueApiResolvers<ContextType>;
  OpaqueComponent?: OpaqueComponentResolvers<ContextType>;
  OpaqueEntity?: OpaqueEntityResolvers<ContextType>;
  OpaqueGroup?: OpaqueGroupResolvers<ContextType>;
  OpaqueLocation?: OpaqueLocationResolvers<ContextType>;
  OpaqueResource?: OpaqueResourceResolvers<ContextType>;
  OpaqueTemplate?: OpaqueTemplateResolvers<ContextType>;
  OpenAPI?: OpenApiResolvers<ContextType>;
  Organization?: OrganizationResolvers<ContextType>;
  Ownable?: OwnableResolvers<ContextType>;
  OwnableConnection?: OwnableConnectionResolvers<ContextType>;
  OwnableEdge?: OwnableEdgeResolvers<ContextType>;
  Owner?: OwnerResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Resource?: ResourceResolvers<ContextType>;
  ResourceConnection?: ResourceConnectionResolvers<ContextType>;
  ResourceEdge?: ResourceEdgeResolvers<ContextType>;
  Service?: ServiceResolvers<ContextType>;
  ServiceTemplate?: ServiceTemplateResolvers<ContextType>;
  Step?: StepResolvers<ContextType>;
  SubDepartment?: SubDepartmentResolvers<ContextType>;
  System?: SystemResolvers<ContextType>;
  SystemConnection?: SystemConnectionResolvers<ContextType>;
  SystemEdge?: SystemEdgeResolvers<ContextType>;
  Team?: TeamResolvers<ContextType>;
  Template?: TemplateResolvers<ContextType>;
  URLLocation?: UrlLocationResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserConnection?: UserConnectionResolvers<ContextType>;
  UserEdge?: UserEdgeResolvers<ContextType>;
  UserProfile?: UserProfileResolvers<ContextType>;
  Website?: WebsiteResolvers<ContextType>;
  _DirectiveArgument_?: GraphQLScalarType;
};

export type DirectiveResolvers<ContextType = any> = {
  discriminates?: DiscriminatesDirectiveResolver<any, any, ContextType>;
  discriminationAlias?: DiscriminationAliasDirectiveResolver<any, any, ContextType>;
  excludeFromFilter?: ExcludeFromFilterDirectiveResolver<any, any, ContextType>;
  field?: FieldDirectiveResolver<any, any, ContextType>;
  implements?: ImplementsDirectiveResolver<any, any, ContextType>;
  relation?: RelationDirectiveResolver<any, any, ContextType>;
  resolve?: ResolveDirectiveResolver<any, any, ContextType>;
};

export type Json = Scalars["JSON"];
export type JsonObject = Scalars["JSONObject"];
export type _DirectiveArgument_ = Scalars["_DirectiveArgument_"];"
`;
